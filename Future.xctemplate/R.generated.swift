//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `.gitignore`.
    static let gitignore = Rswift.FileResource(bundle: R.hostingBundle, name: ".gitignore", pathExtension: "")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Podfile`.
    static let podfile = Rswift.FileResource(bundle: R.hostingBundle, name: "Podfile", pathExtension: "")
    
    /// `bundle.url(forResource: ".gitignore", withExtension: "")`
    static func gitignore(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gitignore
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Podfile", withExtension: "")`
    static func podfile(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.podfile
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `AccessWidget`.
    static let accessWidget = _R.nib._AccessWidget()
    /// Nib `BaseHorizontalCollectionView`.
    static let baseHorizontalCollectionView = _R.nib._BaseHorizontalCollectionView()
    /// Nib `SignupLoginWidget`.
    static let signupLoginWidget = _R.nib._SignupLoginWidget()
    /// Nib `TextFieldView`.
    static let textFieldView = _R.nib._TextFieldView()
    /// Nib `ViewWidget`.
    static let viewWidget = _R.nib._ViewWidget()
    
    /// `UINib(name: "AccessWidget", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accessWidget) instead")
    static func accessWidget(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accessWidget)
    }
    
    /// `UINib(name: "BaseHorizontalCollectionView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.baseHorizontalCollectionView) instead")
    static func baseHorizontalCollectionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.baseHorizontalCollectionView)
    }
    
    /// `UINib(name: "SignupLoginWidget", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.signupLoginWidget) instead")
    static func signupLoginWidget(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signupLoginWidget)
    }
    
    /// `UINib(name: "TextFieldView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.textFieldView) instead")
    static func textFieldView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.textFieldView)
    }
    
    /// `UINib(name: "ViewWidget", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.viewWidget) instead")
    static func viewWidget(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.viewWidget)
    }
    
    static func accessWidget(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AccessWidget? {
      return R.nib.accessWidget.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccessWidget
    }
    
    static func baseHorizontalCollectionView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BaseHorizontalCollectionView? {
      return R.nib.baseHorizontalCollectionView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BaseHorizontalCollectionView
    }
    
    static func signupLoginWidget(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SignupLoginWidget? {
      return R.nib.signupLoginWidget.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SignupLoginWidget
    }
    
    static func textFieldView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.textFieldView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func viewWidget(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ViewWidget? {
      return R.nib.viewWidget.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ViewWidget
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 21 localization keys.
    struct localizable {
      /// en translation: Access with another user
      /// 
      /// Locales: en
      static let kStandbyAction = Rswift.StringResource(key: "kStandbyAction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create an account
      /// 
      /// Locales: en
      static let kSignup = Rswift.StringResource(key: "kSignup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Email
      /// 
      /// Locales: en
      static let kEmail = Rswift.StringResource(key: "kEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Email sent
      /// 
      /// Locales: en
      static let kEmailSent = Rswift.StringResource(key: "kEmailSent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Error
      /// 
      /// Locales: en
      static let kErorr = Rswift.StringResource(key: "kErorr", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Failed to get access token
      /// 
      /// Locales: en
      static let kfailedAccessToken = Rswift.StringResource(key: "kfailedAccessToken", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Forgot your password?
      /// 
      /// Locales: en
      static let kForgotPassword = Rswift.StringResource(key: "kForgotPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Login
      /// 
      /// Locales: en
      static let kLogin = Rswift.StringResource(key: "kLogin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Okay
      /// 
      /// Locales: en
      static let kOkay = Rswift.StringResource(key: "kOkay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Password
      /// 
      /// Locales: en
      static let kPassword = Rswift.StringResource(key: "kPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Repeat password
      /// 
      /// Locales: en
      static let kRepeatPassword = Rswift.StringResource(key: "kRepeatPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Resend email
      /// 
      /// Locales: en
      static let kResendEmail = Rswift.StringResource(key: "kResendEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Reset Password
      /// 
      /// Locales: en
      static let kResetPassword = Rswift.StringResource(key: "kResetPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sign Out
      /// 
      /// Locales: en
      static let kSignout = Rswift.StringResource(key: "kSignout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: SignUp
      /// 
      /// Locales: en
      static let kSignupTitle = Rswift.StringResource(key: "kSignupTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Standby
      /// 
      /// Locales: en
      static let kStandby = Rswift.StringResource(key: "kStandby", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: The application is waiting to have your email verified. You should have received an email for verifying it.   ATTENTION: the email could be on the spam.
      /// 
      /// Locales: en
      static let kStandbyDescription = Rswift.StringResource(key: "kStandbyDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: We sent you an email, if you don't get it checked in spam
      /// 
      /// Locales: en
      static let kEmailSentDescription = Rswift.StringResource(key: "kEmailSentDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You must insert a valid email
      /// 
      /// Locales: en
      static let kNoEmail = Rswift.StringResource(key: "kNoEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You must insert a valid password
      /// 
      /// Locales: en
      static let kInvalidPassword = Rswift.StringResource(key: "kInvalidPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You must insert a valid password, or the password is not equal with the repeat password
      /// 
      /// Locales: en
      static let kInvalidPasswordOrNotMatching = Rswift.StringResource(key: "kInvalidPasswordOrNotMatching", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: Access with another user
      /// 
      /// Locales: en
      static func kStandbyAction(_: Void = ()) -> String {
        return NSLocalizedString("kStandbyAction", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create an account
      /// 
      /// Locales: en
      static func kSignup(_: Void = ()) -> String {
        return NSLocalizedString("kSignup", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Email
      /// 
      /// Locales: en
      static func kEmail(_: Void = ()) -> String {
        return NSLocalizedString("kEmail", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Email sent
      /// 
      /// Locales: en
      static func kEmailSent(_: Void = ()) -> String {
        return NSLocalizedString("kEmailSent", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Error
      /// 
      /// Locales: en
      static func kErorr(_: Void = ()) -> String {
        return NSLocalizedString("kErorr", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failed to get access token
      /// 
      /// Locales: en
      static func kfailedAccessToken(_: Void = ()) -> String {
        return NSLocalizedString("kfailedAccessToken", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Forgot your password?
      /// 
      /// Locales: en
      static func kForgotPassword(_: Void = ()) -> String {
        return NSLocalizedString("kForgotPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login
      /// 
      /// Locales: en
      static func kLogin(_: Void = ()) -> String {
        return NSLocalizedString("kLogin", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Okay
      /// 
      /// Locales: en
      static func kOkay(_: Void = ()) -> String {
        return NSLocalizedString("kOkay", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password
      /// 
      /// Locales: en
      static func kPassword(_: Void = ()) -> String {
        return NSLocalizedString("kPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Repeat password
      /// 
      /// Locales: en
      static func kRepeatPassword(_: Void = ()) -> String {
        return NSLocalizedString("kRepeatPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Resend email
      /// 
      /// Locales: en
      static func kResendEmail(_: Void = ()) -> String {
        return NSLocalizedString("kResendEmail", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reset Password
      /// 
      /// Locales: en
      static func kResetPassword(_: Void = ()) -> String {
        return NSLocalizedString("kResetPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sign Out
      /// 
      /// Locales: en
      static func kSignout(_: Void = ()) -> String {
        return NSLocalizedString("kSignout", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: SignUp
      /// 
      /// Locales: en
      static func kSignupTitle(_: Void = ()) -> String {
        return NSLocalizedString("kSignupTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Standby
      /// 
      /// Locales: en
      static func kStandby(_: Void = ()) -> String {
        return NSLocalizedString("kStandby", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The application is waiting to have your email verified. You should have received an email for verifying it.   ATTENTION: the email could be on the spam.
      /// 
      /// Locales: en
      static func kStandbyDescription(_: Void = ()) -> String {
        return NSLocalizedString("kStandbyDescription", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: We sent you an email, if you don't get it checked in spam
      /// 
      /// Locales: en
      static func kEmailSentDescription(_: Void = ()) -> String {
        return NSLocalizedString("kEmailSentDescription", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You must insert a valid email
      /// 
      /// Locales: en
      static func kNoEmail(_: Void = ()) -> String {
        return NSLocalizedString("kNoEmail", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You must insert a valid password
      /// 
      /// Locales: en
      static func kInvalidPassword(_: Void = ()) -> String {
        return NSLocalizedString("kInvalidPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You must insert a valid password, or the password is not equal with the repeat password
      /// 
      /// Locales: en
      static func kInvalidPasswordOrNotMatching(_: Void = ()) -> String {
        return NSLocalizedString("kInvalidPasswordOrNotMatching", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _AccessWidget: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AccessWidget"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AccessWidget? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccessWidget
      }
      
      fileprivate init() {}
    }
    
    struct _BaseHorizontalCollectionView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BaseHorizontalCollectionView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BaseHorizontalCollectionView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BaseHorizontalCollectionView
      }
      
      fileprivate init() {}
    }
    
    struct _SignupLoginWidget: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SignupLoginWidget"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SignupLoginWidget? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SignupLoginWidget
      }
      
      fileprivate init() {}
    }
    
    struct _TextFieldView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TextFieldView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ViewWidget: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ViewWidget"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ViewWidget? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ViewWidget
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
